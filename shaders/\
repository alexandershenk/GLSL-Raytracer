#version 430
uniform float roll;

layout(rgba32f, binding = 0) uniform image2D destTex;

layout(std140, binding = 2) uniform camData
{
	vec4 cPos;
	mat4 view;
	mat4 proj;
};

mat4 invViewProjMat; 
vec4 ray00; 
vec4 ray10; 

vec4 ray01; 
vec4 ray11; 

layout (local_size_x = 1, local_size_y = 1) in;

void main() {
	 invViewProjMat = inverse(proj * view);

	ray00 =  invViewProjMat * vec4(-1, -1, 0, 1);
	ray00 = ray00/ray00.w;
	//ray00 -= cPos;

	ray01 = vec4(-1, 1, 0, 1) * invViewProjMat;
	ray01 = ray01/ray00.w;
	//ray01 -= cPos;

	ray10 = vec4(1, -1, 0, 1) * invViewProjMat;
	ray10 = ray10/ray10.w;
	//ray10 -= cPos;

	ray11 = vec4(1, 1, 0, 1) * invViewProjMat;
	ray11 = ray11/ray10.w;
	//ray11 -= cPos;

	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	vec2 pos =  storePos / vec2(512,512);
	vec4 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);

	vec4 color = vec4(1,0,0,1);

	vec3 E = dir.xyz;
	vec3 D = vec3(dir.x, dir.y, dir.z-10);

	vec3 N = vec3(1,0,0);

	vec3 Q = vec3(0,0,0);

	vec3 a = D*D;
	vec3 b = 2*E*D;
	vec3 c = E*E-1;

	//vec3 discrim = b*b - 4*a*c;
	vec3 discrim = (N*(Q-E))/N*D;


	if(discrim.x >= 0 && discrim.y >= 0 && discrim.z >= 0){
	
		imageStore(destTex, storePos, vec4(0,0,1,1));
	}
	else{
		imageStore(destTex, storePos, vec4(.5,0,0,1));
	}

	if(ray00.x > 0.1){
		imageStore(destTex, storePos, vec4(1,1,0,1));
	}

	//imageStore(destTex, storePos, vec4(dir.x,dir.y,dir.z,1));


}



